{"version":3,"sources":["../../src/Image.js"],"names":["_","React","Image","subscribedToCache","setURI","uri","setState","props","style","absoluteFill","transform","pickBy","flatten","value","key","propsToCopy","indexOf","result","borderWidth","cache","intensity","Value","load","prevProps","prevState","preview","state","undefined","timing","duration","toValue","useNativeDriver","start","computedStyle","resizeMode","hasPreview","opacity","interpolate","inputRange","outputRange","OS","backgroundColor","black","Component","AnimatedBlurView","createAnimatedComponent"],"mappings":"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","file":"Image.js","sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport {Image as RNImage, Animated, StyleSheet, View, Platform} from \"react-native\";\nimport {BlurView} from \"expo\";\nimport {type StyleObj} from \"react-native/Libraries/StyleSheet/StyleSheetTypes\";\n\nimport CacheManager from \"./CacheManager\";\n\ntype ImageProps = {\n    style?: StyleObj,\n    preview?: string,\n    uri: string\n};\n\ntype ImageState = {\n    uri: string,\n    intensity: Animated.Value\n};\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n\n    style: StyleObj;\n    subscribedToCache = true;\n\n    load(props: ImageProps) {\n        const {uri, style} = props;\n        this.style = [\n            StyleSheet.absoluteFill,\n            _.transform(\n                _.pickBy(StyleSheet.flatten(style), (value, key) => propsToCopy.indexOf(key) !== -1),\n                // $FlowFixMe\n                (result, value, key) => Object.assign(result, { [key]: (value - (style.borderWidth || 0)) })\n            )\n        ];\n        CacheManager.cache(uri, this.setURI);\n    }\n\n    componentWillMount() {\n        const intensity = new Animated.Value(100);\n        this.setState({ intensity });\n        this.load(this.props);\n    }\n\n    componentWillReceiveProps(props: ImageProps) {\n        this.load(props);\n    }\n\n    setURI = (uri: string) => {\n        if (this.subscribedToCache) {\n            this.setState({ uri });\n        }\n    };\n\n    componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n        const {preview} = this.props;\n        const {uri, intensity} = this.state;\n        if (uri && preview && uri !== preview && prevState.uri === undefined) {\n            Animated.timing(intensity, { duration: 300, toValue: 0, useNativeDriver: true }).start();\n        }\n    }\n\n    componentWillUnmount() {\n        this.subscribedToCache = false;\n    }\n\n    render(): React.Node {\n        const {style: computedStyle} = this;\n        const {preview, style, resizeMode = \"cover\"} = this.props;\n        const {uri, intensity} = this.state;\n        const hasPreview = !!preview;\n        const opacity = intensity.interpolate({\n            inputRange: [0, 100],\n            outputRange: [0, 0.5]\n        });\n        return (\n            <View {...{style}}>\n                {\n                    hasPreview && (\n                        <RNImage\n                            source={{ uri: preview }}\n                            resizeMode={resizeMode}\n                            style={computedStyle}\n                            blurRadius={Platform.OS === \"android\" ? 0.5 : 0}\n                        />\n                    )\n                }\n                {\n                    (uri && uri !== preview) && (\n                        <RNImage\n                            source={{ uri }}\n                            resizeMode={resizeMode}\n                            style={computedStyle}\n                        />\n                    )\n                }\n                {\n                    hasPreview && Platform.OS === \"ios\" && (\n                        <AnimatedBlurView tint=\"dark\" style={computedStyle} {...{intensity}} />\n                    )\n                }\n                {\n                    hasPreview && Platform.OS === \"android\" && (\n                        <Animated.View style={[computedStyle, { backgroundColor: black, opacity }]} />\n                    )\n                }\n            </View>\n        );\n    }\n}\n\nconst black = \"black\";\nconst propsToCopy = [\n    \"borderRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\"\n];\n\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]}