{"version":3,"sources":["../../src/CacheManager.js"],"names":["CacheManager","uri","listener","getCacheEntry","path","exists","isDownloading","addListener","downloadAsync","notifyAll","unsubscribe","listeners","forEach","push","undefined","filename","substring","lastIndexOf","indexOf","length","ext","cacheDirectory","getInfoAsync","info"],"mappings":"6mBACA,0BACA,mC,8QAIqBA,a,wJAIEC,G,CAAaC,Q,qLACCC,cAAcF,GAAd,C,4BAAtBG,I,MAAAA,I,CAAMC,M,MAAAA,M,KACTC,cAAcL,GAAd,C,yBACAM,YAAYN,GAAZ,CAAiBC,QAAjB,E,kCACOG,M,0BACPH,SAASE,IAAT,E,+BAEAG,YAAYN,GAAZ,CAAiBC,QAAjB,E,kEAEU,iBAAWM,aAAX,CAAyBP,GAAzB,CAA8BG,IAA9B,C,UACNK,UAAUR,GAAV,CAAeG,IAAf,E,kFAEAK,UAAUR,GAAV,CAAeA,GAAf,E,QAEJS,YAAYT,GAAZ,E,sGAhBDU,S,CAA2C,E,wBAFjCX,Y,CAuBrB,GAAMU,aAAc,QAAdA,YAAc,CAACT,GAAD,QAAiB,OAAOD,cAAaW,SAAb,CAAuBV,GAAvB,CAAxB,EAApB,CAEA,GAAMQ,WAAY,QAAZA,UAAY,CAACR,GAAD,CAAcG,IAAd,QAA+BJ,cAAaW,SAAb,CAAuBV,GAAvB,EAA4BW,OAA5B,CAAoC,yBAAYV,UAASE,IAAT,CAAZ,EAApC,CAA/B,EAAlB,CAEA,GAAMG,aAAc,QAAdA,YAAc,CAACN,GAAD,CAAcC,QAAd,CAAqC,CACrD,GAAI,CAACF,aAAaW,SAAb,CAAuBV,GAAvB,CAAL,CAAkC,CAC9BD,aAAaW,SAAb,CAAuBV,GAAvB,EAA8B,EAA9B,CACH,CACDD,aAAaW,SAAb,CAAuBV,GAAvB,EAA4BY,IAA5B,CAAiCX,QAAjC,EACH,CALD,CAOA,GAAMI,eAAgB,QAAhBA,cAAgB,CAACL,GAAD,QAA0BD,cAAaW,SAAb,CAAuBV,GAAvB,IAAgCa,SAA1D,EAAtB,CAEA,GAAMX,eAAgB,QAAhBA,cAAgB,CAAOF,GAAP,6JACZc,QADY,CACDd,IAAIe,SAAJ,CAAcf,IAAIgB,WAAJ,CAAgB,GAAhB,CAAd,CAAoChB,IAAIiB,OAAJ,CAAY,GAAZ,IAAqB,CAAC,CAAtB,CAA0BjB,IAAIkB,MAA9B,CAAuClB,IAAIiB,OAAJ,CAAY,GAAZ,CAA3E,CADC,CAEZE,GAFY,CAENL,SAASG,OAAT,CAAiB,GAAjB,IAA0B,CAAC,CAA3B,CAA+B,MAA/B,CAAwCH,SAASC,SAAT,CAAmBD,SAASE,WAAT,CAAqB,GAArB,CAAnB,CAFlC,CAGZb,IAHY,CAGL,iBAAWiB,cAAX,CAA4B,kBAAKpB,GAAL,CAA5B,CAAwCmB,GAHnC,kDAIC,iBAAWE,YAAX,CAAwBlB,IAAxB,CAJD,SAIZmB,IAJY,gBAKXlB,MALW,CAKDkB,IALC,CAKXlB,MALW,kCAMX,CAAEA,aAAF,CAAUD,SAAV,CANW,4DAAtB","file":"CacheManager.js","sourcesContent":["// @flow\nimport {FileSystem} from \"expo\";\nimport SHA1 from \"crypto-js/sha1\";\n\ntype Listener = string => mixed;\n\nexport default class CacheManager {\n\n    static listeners: { [uri: string]: Listener[] } = {};\n\n    static async cache(uri: string, listener: Listener): Promise<void> {\n        const {path, exists} = await getCacheEntry(uri);\n        if (isDownloading(uri)) {\n            addListener(uri, listener);\n        } else if (exists) {\n            listener(path);\n        } else {\n            addListener(uri, listener);\n            try {\n                await FileSystem.downloadAsync(uri, path);\n                notifyAll(uri, path);\n            } catch (e) {\n                notifyAll(uri, uri);\n            }\n            unsubscribe(uri);\n        }\n    }\n}\n\nconst unsubscribe = (uri: string) => delete CacheManager.listeners[uri];\n\nconst notifyAll = (uri: string, path: string) => CacheManager.listeners[uri].forEach(listener => listener(path));\n\nconst addListener = (uri: string, listener: Listener) => {\n    if (!CacheManager.listeners[uri]) {\n        CacheManager.listeners[uri] = [];\n    }\n    CacheManager.listeners[uri].push(listener);\n};\n\nconst isDownloading = (uri: string): boolean => CacheManager.listeners[uri] !== undefined;\n\nconst getCacheEntry = async (uri): Promise<{ exists: boolean, path: string }> => {\n    const filename = uri.substring(uri.lastIndexOf(\"/\"), uri.indexOf(\"?\") === -1 ? uri.length : uri.indexOf(\"?\"));\n    const ext = filename.indexOf(\".\") === -1 ? \".jpg\" : filename.substring(filename.lastIndexOf(\".\"));\n    const path = FileSystem.cacheDirectory + SHA1(uri) + ext;\n    const info = await FileSystem.getInfoAsync(path);\n    const {exists} = info;\n    return { exists, path };\n};\n"]}